@model HyperTyk.Models.auth

@{
    ViewBag.Title = "Reset Password - HyperFyp";
    Layout = "~/Views/Landing/_LandingLayout.cshtml";
}

<style>
    .center-div .inside {
        align-items: unset;
    }

    h2 {
        font-weight: 100;
        margin: 20px 0px 10px 40px;
    }

    .body {
        min-height: 90vh;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .login-box {
        max-width: 400px;
        width: 85%;
        margin: 10px auto;
        padding: 40px 20px 40px 20px;
        border: 1px solid #442551;
        border-radius: 10px;
        box-shadow: 0px 5px 10px rgba(0,0,0,0.2);
        background-color: #fafafaff;
        color: #4b2c58;
    }

    .inputbox {
        position: relative;
        margin-bottom: 10px;
        display: flex;
        justify-content: center;
    }

        .inputbox label {
            position: absolute;
            top: -10px;
            left: 5px;
            color: #000000;
            font-size: 1em;
            pointer-events: none;
            transition: .2s;
        }

        .inputbox input {
            width: 90%;
            padding: 15px;
            border: none;
            border-bottom: 2px solid #dcdcdc;
            border-radius: 15px;
            outline: none;
            font-size: 14px;
            background-color: #f4eefb;
            box-sizing: border-box;
        }

            .inputbox input:focus + label, .inputbox input:not(:placeholder-shown) + label {
                bottom: 50px;
                font-size: 14px;
                color: #333;
            }

            .inputbox input:focus, .inputbox input:not(:placeholder-shown) {
                border-bottom-color: #9a00c7;
            }

        .inputbox ion-icon {
            position: absolute;
            right: 35px;
            color: #700079;
            font-size: 1.2em;
            top: 15px;
        }

    .login-button {
        display: flex;
        justify-content: center;
    }

    .button {
        width: 45%;
        height: 49px;
        border-radius: 35px;
        background-color: #5b43a7;
        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
        border: none;
        outline: none;
        cursor: pointer;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 17px;
        font-weight: 500;
        color: #ffffff;
        transition: background-color 0.4s ease;
    }

        .button:hover {
            background-color: #312952;
        }
</style>
<main class="inside">
    <div class="body">
        <div class="login-box">
            <span><i style="font-size: 50px; display: flex; justify-content: center; margin-bottom: 10px;" class='bx bxs-key'></i></span>
            <span style="color: #4b2c58;font-family: Bahnschrift;font-weight: 900; font-size: 30px; display: flex; justify-content: center; margin-bottom: 10px;">Choose a new Password</span>
            <span style="font-size: 15px; display: flex; justify-content: center; margin-bottom: 30px; ">Must be at least 8 characters.<br />Must contain at least 2 special characters.<br />Must contain at least one number.<br />Must must contain at least one capital letter.</span>
                  <section>
                      @using (Html.BeginForm("new_password", "Landing", FormMethod.Post))
                      {
                          <div class="inputbox">
                              @Html.TextBox("newPassword", null, new { @id = "newPassword", @placeholder = "New Password", @type = "password", @oninput = "validatePasswordInput()", @required = "required" })
                          </div>
                          <div class="inputbox">
                              @Html.TextBox("newConfirmPassword", null, new { @id = "newConfirmPassword", @placeholder = "Confirm Password", @type = "password", @oninput = "validateConfirmPasswordOnInput()", @required = "required" })
                          </div>
                          <br />
                          <div class="login-button">
                              <button type="submit" class="button" id="post">Continue</button>
                          </div>
                      }
                  </section>
        </div>
    </div>
</main>
<script>
    window.onload = function () {
        var errorAlert = document.getElementById('passwordMismatch');
        var successAlert = document.getElementById('passwordMismatch2');

        function hideNotification(notification) {
            var container = notification.parentElement;
            container.style.animation = 'slideOut 0.5s ease forwards';
            container.addEventListener('animationend', function () {
                container.style.display = 'none';
            });
        }

        if (errorAlert) {
            errorAlert.querySelector('.close').addEventListener('click', function () {
                hideNotification(errorAlert);
            });
            setTimeout(function () {
                hideNotification(errorAlert);
            }, 4000);
        } else if (successAlert) {
            successAlert.querySelector('.close').addEventListener('click', function () {
                hideNotification(successAlert);
            });
            setTimeout(function () {
                hideNotification(successAlert);
            }, 4000);
        }
    };
</script>
<script>
    function validatePasswordInput() {
        var passwordInput = document.getElementById("newPassword");
        var password = passwordInput.value;
        var minLength = 8;
        var minSpecialChars = 2;
        var specialChars = /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
        var hasNumber = /\d/;
        var hasCapitalLetter = /[A-Z]/;

        if (password.length < minLength) {
            passwordInput.setCustomValidity("Password must be at least 8 characters long");
            passwordInput.style.borderColor = "red";
        } else if (!specialChars.test(password) || (password.match(/[^a-zA-Z0-9]/g) || []).length < minSpecialChars) {
            passwordInput.setCustomValidity("Password must contain at least 2 special characters");
            passwordInput.style.borderColor = "red";
        } else if (!hasNumber.test(password)) {
            passwordInput.setCustomValidity("Password must contain at least one number");
            passwordInput.style.borderColor = "red";
        } else if (!hasCapitalLetter.test(password)) {
            passwordInput.setCustomValidity("Password must contain at least one capital letter");
            passwordInput.style.borderColor = "red";
        } else {
            passwordInput.setCustomValidity("");
            passwordInput.style.borderColor = "#9a00c7"; // Reset border color
        }
    }

    function validateConfirmPasswordOnInput() {
        var confirmInput = document.getElementById("newConfirmPassword");

        // Prevent pasted characters
        confirmInput.onpaste = function (e) {
            e.preventDefault();
        };

        // Check if passwords match
        var password = document.getElementById("newPassword").value;
        var confirmPassword = confirmInput.value;

        if (password !== confirmPassword) {
            confirmInput.style.borderColor = "red";
            confirmInput.setCustomValidity("Passwords do not match");
        } else {
            confirmInput.style.borderColor = "#9a00c7";
            confirmInput.setCustomValidity("");
        }
    }
</script>